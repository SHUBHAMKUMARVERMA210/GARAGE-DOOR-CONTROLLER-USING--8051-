C51 COMPILER V9.60.0.0   DTMF_MODULE                                                       03/25/2022 10:24:52 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DTMF_MODULE
OBJECT MODULE PLACED IN .\Objects\DTMF-MODULE.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE DTMF-MODULE.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND LISTINCLUDE SY
                    -MBOLS PRINT(.\Listings\DTMF-MODULE.lst) TABS(2) OBJECT(.\Objects\DTMF-MODULE.obj)

line level    source

   1          #include<reg51.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG51.H
   3      =1  
   4      =1  Header file for generic 80C51 and 80C31 microcontroller.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __REG51_H__
  10      =1  #define __REG51_H__
  11      =1  
  12      =1  /*  BYTE Register  */
  13      =1  sfr P0   = 0x80;
  14      =1  sfr P1   = 0x90;
  15      =1  sfr P2   = 0xA0;
  16      =1  sfr P3   = 0xB0;
  17      =1  sfr PSW  = 0xD0;
  18      =1  sfr ACC  = 0xE0;
  19      =1  sfr B    = 0xF0;
  20      =1  sfr SP   = 0x81;
  21      =1  sfr DPL  = 0x82;
  22      =1  sfr DPH  = 0x83;
  23      =1  sfr PCON = 0x87;
  24      =1  sfr TCON = 0x88;
  25      =1  sfr TMOD = 0x89;
  26      =1  sfr TL0  = 0x8A;
  27      =1  sfr TL1  = 0x8B;
  28      =1  sfr TH0  = 0x8C;
  29      =1  sfr TH1  = 0x8D;
  30      =1  sfr IE   = 0xA8;
  31      =1  sfr IP   = 0xB8;
  32      =1  sfr SCON = 0x98;
  33      =1  sfr SBUF = 0x99;
  34      =1  
  35      =1  
  36      =1  /*  BIT Register  */
  37      =1  /*  PSW   */
  38      =1  sbit CY   = 0xD7;
  39      =1  sbit AC   = 0xD6;
  40      =1  sbit F0   = 0xD5;
  41      =1  sbit RS1  = 0xD4;
  42      =1  sbit RS0  = 0xD3;
  43      =1  sbit OV   = 0xD2;
  44      =1  sbit P    = 0xD0;
  45      =1  
  46      =1  /*  TCON  */
  47      =1  sbit TF1  = 0x8F;
  48      =1  sbit TR1  = 0x8E;
  49      =1  sbit TF0  = 0x8D;
  50      =1  sbit TR0  = 0x8C;
  51      =1  sbit IE1  = 0x8B;
  52      =1  sbit IT1  = 0x8A;
  53      =1  sbit IE0  = 0x89;
C51 COMPILER V9.60.0.0   DTMF_MODULE                                                       03/25/2022 10:24:52 PAGE 2   

  54      =1  sbit IT0  = 0x88;
  55      =1  
  56      =1  /*  IE   */
  57      =1  sbit EA   = 0xAF;
  58      =1  sbit ES   = 0xAC;
  59      =1  sbit ET1  = 0xAB;
  60      =1  sbit EX1  = 0xAA;
  61      =1  sbit ET0  = 0xA9;
  62      =1  sbit EX0  = 0xA8;
  63      =1  
  64      =1  /*  IP   */ 
  65      =1  sbit PS   = 0xBC;
  66      =1  sbit PT1  = 0xBB;
  67      =1  sbit PX1  = 0xBA;
  68      =1  sbit PT0  = 0xB9;
  69      =1  sbit PX0  = 0xB8;
  70      =1  
  71      =1  /*  P3  */
  72      =1  sbit RD   = 0xB7;
  73      =1  sbit WR   = 0xB6;
  74      =1  sbit T1   = 0xB5;
  75      =1  sbit T0   = 0xB4;
  76      =1  sbit INT1 = 0xB3;
  77      =1  sbit INT0 = 0xB2;
  78      =1  sbit TXD  = 0xB1;
  79      =1  sbit RXD  = 0xB0;
  80      =1  
  81      =1  /*  SCON  */
  82      =1  sbit SM0  = 0x9F;
  83      =1  sbit SM1  = 0x9E;
  84      =1  sbit SM2  = 0x9D;
  85      =1  sbit REN  = 0x9C;
  86      =1  sbit TB8  = 0x9B;
  87      =1  sbit RB8  = 0x9A;
  88      =1  sbit TI   = 0x99;
  89      =1  sbit RI   = 0x98;
  90      =1  
  91      =1  #endif
   2          #define lcd P2
   3          
   4           //functions' declaration
   5          void init();
   6          void delay(int);
   7          void character(unsigned char);
   8          void cmd(unsigned char);
   9          void string(unsigned char *);
  10          void number(int);
  11          
  12          void display(int a);
  13          
  14          sbit rs=P3^0;
  15          sbit en=P3^1;
  16          
  17          sbit r0=P1^0;
  18          sbit r1=P1^1;
  19          sbit r2=P1^2;
  20          sbit r3=P1^3;
  21          
  22          sbit c0=P1^4;
  23          sbit c1=P1^5;
  24          sbit c2=P1^6;
  25          sbit c3=P1^7;
C51 COMPILER V9.60.0.0   DTMF_MODULE                                                       03/25/2022 10:24:52 PAGE 3   

  26          
  27          // DTMF output simulator
  28          sbit q0=P3^4;
  29          sbit q1=P3^5;
  30          sbit q2=P3^6;
  31          sbit q3=P3^7;
  32          
  33          void main()
  34          {
  35   1        unsigned char m=3;
  36   1        lcd=0x00;
  37   1        rs=0;
  38   1        en=0;
  39   1        init();
  40   1        string("  MOBILE PHONE");
  41   1        delay(2000);
  42   1        
  43   1        cmd(0x01);
  44   1        string("DIALLING...");
  45   1        delay(2000);
  46   1        
  47   1        cmd(0x01);
  48   1        cmd(0x80);
  49   1        string("ENTER THE CODE:");
  50   1          
  51   1        r0=r1=r2=r3=0;      //o/p port
  52   1        c0=c1=c2=c3=1;      //i/p port
  53   1        q0=q1=q2=q3=0;      // make dtmf output simulator pins as output
  54   1      
  55   1      //-------------------Keypad Code--------------------//
  56   1        while(1)
  57   1        {
  58   2          r0=r1=r2=r3=0;
  59   2          
  60   2          if(c0==0)
  61   2          {
  62   3            r0=r1=r2=r3=1;         //to start making each row=0 one by one
  63   3            r0=0;
  64   3            if(c0==0)
  65   3            display(1);
  66   3            r0=1;
  67   3            r1=0;
  68   3            if(c0==0)
  69   3            display(5);
  70   3            r1=1;
  71   3            r2=0;
  72   3            if(c0==0)
  73   3            display(9);
  74   3            r2=1;
  75   3            r3=0;
  76   3            if(c0==0)
  77   3            display(13); 
  78   3          }
  79   2            
  80   2          else if(c1==0)
  81   2          {
  82   3            r0=r1=r2=r3=1;         //to start making each row=0 one by one
  83   3            r0=0;
  84   3            if(c1==0)
  85   3            display(2);
  86   3            r0=1;
  87   3            r1=0;
C51 COMPILER V9.60.0.0   DTMF_MODULE                                                       03/25/2022 10:24:52 PAGE 4   

  88   3            if(c1==0)
  89   3            display(6);
  90   3            r1=1;
  91   3            r2=0;
  92   3            if(c1==0)
  93   3            display(10);
  94   3            r2=1;
  95   3            r3=0;
  96   3            if(c1==0)
  97   3            display(14);
  98   3          }
  99   2          
 100   2          else if(c2==0)
 101   2          {
 102   3            r0=r1=r2=r3=1;         //to start making each row=0 one by one
 103   3            r0=0;
 104   3            if(c2==0)
 105   3            display(3);
 106   3            r0=1;
 107   3            r1=0;
 108   3            if(c2==0)
 109   3            display(7);
 110   3            r1=1;
 111   3            r2=0;
 112   3            if(c2==0)
 113   3            display(11);
 114   3            r2=1;
 115   3            r3=0;
 116   3            if(c2==0)
 117   3            display(15);
 118   3          }
 119   2          else if(c3==0)
 120   2          {
 121   3            r0=r1=r2=r3=1;         //to start making each row=0 one by one
 122   3            r0=0;
 123   3            if(c3==0)
 124   3            display(4);
 125   3            r0=1;
 126   3            r1=0;
 127   3            if(c3==0)
 128   3            display(8);
 129   3            r1=1;
 130   3            r2=0;
 131   3            if(c3==0)
 132   3            display(12);
 133   3            r2=1;
 134   3            r3=0;
 135   3            if(c3==0)
 136   3            display(16);
 137   3          } 
 138   2        }
 139   1      }
 140          
 141          void display(int a) 
 142          {
 143   1        switch(a)
 144   1        {
 145   2          case 1:{
 146   3                 cmd(0x01);
 147   3                 string("1");
 148   3                 q3=0; q2=0; q1=0; q0=1;
 149   3              
C51 COMPILER V9.60.0.0   DTMF_MODULE                                                       03/25/2022 10:24:52 PAGE 5   

 150   3                 break;
 151   3             }
 152   2          case 2:{
 153   3                 cmd(0x01);
 154   3                 string("2");
 155   3                 q3=0; q2=0; q1=1; q0=0;
 156   3                 break;
 157   3             }
 158   2          case 3:{
 159   3                 cmd(0x01);
 160   3                 string("3");
 161   3                 q3=0; q2=0; q1=1; q0=1;
 162   3                 break;
 163   3             }
 164   2          case 5:{
 165   3                 cmd(0x01);
 166   3                 string("4");
 167   3                 q3=0; q2=1; q1=0; q0=0;
 168   3                 break;
 169   3             }
 170   2          case 6:{
 171   3                 cmd(0x01);
 172   3                 string("5");
 173   3                 q3=0; q2=1; q1=0; q0=1;
 174   3                 break;
 175   3             }
 176   2          case 7:{
 177   3                 cmd(0x01);
 178   3                 string("6");
 179   3                 q3=0; q2=1; q1=1; q0=0;
 180   3                 break;
 181   3             }
 182   2          case 9:{
 183   3                 cmd(0x01);
 184   3                 string("7");
 185   3                 q3=0; q2=1; q1=1; q0=1;
 186   3                 break;
 187   3             }
 188   2          case 10:{
 189   3                 cmd(0x01);
 190   3                 string("8");
 191   3                 q3=1; q2=0; q1=0; q0=0;
 192   3                 break;
 193   3             }
 194   2          case 11:{
 195   3                 cmd(0x01);
 196   3                 string("9");
 197   3                 q3=1; q2=0; q1=0; q0=1;
 198   3                 break;
 199   3              }
 200   2          case 13:{
 201   3                 cmd(0x01);
 202   3                 string("*");
 203   3                 q3=1; q2=0; q1=1; q0=1;
 204   3                 break;
 205   3              }
 206   2          case 14:{
 207   3                 cmd(0x01);
 208   3                 string("0");
 209   3                 q3=0; q2=0; q1=0; q0=0;
 210   3                 break;
 211   3              }
C51 COMPILER V9.60.0.0   DTMF_MODULE                                                       03/25/2022 10:24:52 PAGE 6   

 212   2          case 15:{
 213   3                 cmd(0x01);
 214   3                 string("#");
 215   3                 q3=1; q2=1; q1=0; q0=0;
 216   3                 break;
 217   3              }   
 218   2        }
 219   1      }
 220          //-----------End of Keypad Code----------------//
 221          
 222          //-----------------LCD Code---------------------//
 223          
 224          void init()
 225          {
 226   1      
 227   1        cmd(0x01);     //clear the screen c
 228   1      
 229   1        cmd(0x38);     //8-bit mode with 5*7 matrix
 230   1        cmd(0x0c);     //display on with cursor =>(0ch=curson off; 0fh=cursor blinking; 0eh=curson on)
 231   1        
 232   1        
 233   1        cmd(0x06);     //shift cursor =>(06h right--> ; 04h <---left; default=right--->)
 234   1        cmd(0x80);     //position =>(80=1st row 1st position; c0=2nd row 1st position)
 235   1      }
 236          
 237          void cmd(unsigned char ch)
 238          {
 239   1        lcd=ch;
 240   1        rs=0;
 241   1        en=1;
 242   1        delay(2);
 243   1        en=0;
 244   1      }
 245          
 246          void character(unsigned char ch)
 247          {
 248   1        lcd=ch;
 249   1        rs=1;
 250   1        en=1;
 251   1        delay(2);
 252   1        en=0;
 253   1      }
 254          
 255          void string(unsigned char *p)
 256          {
 257   1        while(*p)
 258   1        character(*p++);
 259   1      }
 260          
 261          void number(int n)
 262          { 
 263   1        unsigned char i=1,arr[5];
 264   1      
 265   1        if(n<0)
 266   1        {
 267   2          character('-');     //signed representation for negative number
 268   2          n=-n;         //taking magnitude 
 269   2        }
 270   1        if(n==0)
 271   1          character('0');
 272   1        while(n>0)
 273   1        {
C51 COMPILER V9.60.0.0   DTMF_MODULE                                                       03/25/2022 10:24:52 PAGE 7   

 274   2          arr[i]=(n%10)+48;
 275   2          n=n/10;
 276   2          i++;
 277   2        }
 278   1        
 279   1        for(--i;i>0;i--)     //problem with >=; remedy=> initialize i=1 and stop at i>0
 280   1        {
 281   2        character(arr[i]);
 282   2        }
 283   1      }
 284          
 285          void delay(int d)
 286          {
 287   1        unsigned char i;
 288   1        for(;d>0;d--)
 289   1        {
 290   2          for(i=250;i>0;i--);   //500usec
 291   2          for(i=250;i>0;i--);   //500usec
 292   2        }
 293   1      }
 294          
 295          
 296          //---------------End of LCD Code----------------------//
C51 COMPILER V9.60.0.0   DTMF_MODULE                                                       03/25/2022 10:24:52 PAGE 8   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
_number. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  arr. . . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    0003H  5
_delay . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0006H  -----
  d. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
c0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
c1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
c2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
c3 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
_string. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  p. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
q0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
q1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
r0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
q2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
r1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
q3 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
r2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
r3 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  m. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_character . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_cmd . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
init . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
en . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
rs . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
_display . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  a. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    958    ----
   CONSTANT SIZE    =     67    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
