C51 COMPILER V9.60.0.0   GARAGE_DOOR_CONTROLLER_USING_8051_                                03/25/2022 10:22:45 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GARAGE_DOOR_CONTROLLER_USING_8051_
OBJECT MODULE PLACED IN .\Objects\GARAGE-DOOR-CONTROLLER-USING(8051).obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE GARAGE-DOOR-CONTROLLER-USING(8051).c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJE
                    -CTEXTEND LISTINCLUDE SYMBOLS PRINT(.\Listings\GARAGE-DOOR-CONTROLLER-USING(8051).lst) TABS(2) OBJECT(.\Objects\GARAGE-DO
                    -OR-CONTROLLER-USING(8051).obj)

line level    source

   1          #include<reg51.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG51.H
   3      =1  
   4      =1  Header file for generic 80C51 and 80C31 microcontroller.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __REG51_H__
  10      =1  #define __REG51_H__
  11      =1  
  12      =1  /*  BYTE Register  */
  13      =1  sfr P0   = 0x80;
  14      =1  sfr P1   = 0x90;
  15      =1  sfr P2   = 0xA0;
  16      =1  sfr P3   = 0xB0;
  17      =1  sfr PSW  = 0xD0;
  18      =1  sfr ACC  = 0xE0;
  19      =1  sfr B    = 0xF0;
  20      =1  sfr SP   = 0x81;
  21      =1  sfr DPL  = 0x82;
  22      =1  sfr DPH  = 0x83;
  23      =1  sfr PCON = 0x87;
  24      =1  sfr TCON = 0x88;
  25      =1  sfr TMOD = 0x89;
  26      =1  sfr TL0  = 0x8A;
  27      =1  sfr TL1  = 0x8B;
  28      =1  sfr TH0  = 0x8C;
  29      =1  sfr TH1  = 0x8D;
  30      =1  sfr IE   = 0xA8;
  31      =1  sfr IP   = 0xB8;
  32      =1  sfr SCON = 0x98;
  33      =1  sfr SBUF = 0x99;
  34      =1  
  35      =1  
  36      =1  /*  BIT Register  */
  37      =1  /*  PSW   */
  38      =1  sbit CY   = 0xD7;
  39      =1  sbit AC   = 0xD6;
  40      =1  sbit F0   = 0xD5;
  41      =1  sbit RS1  = 0xD4;
  42      =1  sbit RS0  = 0xD3;
  43      =1  sbit OV   = 0xD2;
  44      =1  sbit P    = 0xD0;
  45      =1  
  46      =1  /*  TCON  */
  47      =1  sbit TF1  = 0x8F;
  48      =1  sbit TR1  = 0x8E;
  49      =1  sbit TF0  = 0x8D;
  50      =1  sbit TR0  = 0x8C;
  51      =1  sbit IE1  = 0x8B;
  52      =1  sbit IT1  = 0x8A;
C51 COMPILER V9.60.0.0   GARAGE_DOOR_CONTROLLER_USING_8051_                                03/25/2022 10:22:45 PAGE 2   

  53      =1  sbit IE0  = 0x89;
  54      =1  sbit IT0  = 0x88;
  55      =1  
  56      =1  /*  IE   */
  57      =1  sbit EA   = 0xAF;
  58      =1  sbit ES   = 0xAC;
  59      =1  sbit ET1  = 0xAB;
  60      =1  sbit EX1  = 0xAA;
  61      =1  sbit ET0  = 0xA9;
  62      =1  sbit EX0  = 0xA8;
  63      =1  
  64      =1  /*  IP   */ 
  65      =1  sbit PS   = 0xBC;
  66      =1  sbit PT1  = 0xBB;
  67      =1  sbit PX1  = 0xBA;
  68      =1  sbit PT0  = 0xB9;
  69      =1  sbit PX0  = 0xB8;
  70      =1  
  71      =1  /*  P3  */
  72      =1  sbit RD   = 0xB7;
  73      =1  sbit WR   = 0xB6;
  74      =1  sbit T1   = 0xB5;
  75      =1  sbit T0   = 0xB4;
  76      =1  sbit INT1 = 0xB3;
  77      =1  sbit INT0 = 0xB2;
  78      =1  sbit TXD  = 0xB1;
  79      =1  sbit RXD  = 0xB0;
  80      =1  
  81      =1  /*  SCON  */
  82      =1  sbit SM0  = 0x9F;
  83      =1  sbit SM1  = 0x9E;
  84      =1  sbit SM2  = 0x9D;
  85      =1  sbit REN  = 0x9C;
  86      =1  sbit TB8  = 0x9B;
  87      =1  sbit RB8  = 0x9A;
  88      =1  sbit TI   = 0x99;
  89      =1  sbit RI   = 0x98;
  90      =1  
  91      =1  #endif
   2          #define lcd P2
   3          
   4          //functions' declaration
   5          void controller_init();
   6          void lcd_init();
   7          void character(unsigned char);
   8          void cmd(unsigned char);
   9          void string(unsigned char *);
  10          void delay(int);
  11          
  12          void check_and_open();
  13          void check_and_close();
  14            
  15          // Motor Driver IC Input pins
  16          sbit in1=P1^0;
  17          sbit in2=P1^1;   
  18          
  19          // lcd control pins
  20          sbit rs=P1^6;
  21          sbit en=P1^7;
  22          
  23          unsigned char m=3;
  24          int d, password_digit1, password_digit2, password_digit3, password_digit4, flag=0, end_star, end_hash;
C51 COMPILER V9.60.0.0   GARAGE_DOOR_CONTROLLER_USING_8051_                                03/25/2022 10:22:45 PAGE 3   

  25          
  26          void main()
  27          {
  28   1        controller_init();
  29   1        lcd_init();
  30   1        string("PASSWD PROTECTED");
  31   1        cmd(0xc0);
  32   1        string("   GARAGE DOOR");
  33   1        delay(2000);
  34   1        
  35   1        while(1)  // Execute the following commands infinitely(continueously)
  36   1        {
  37   2          if((P3 & 0x0f) == 11)   // if * is pressed to open the door
  38   2          {
  39   3            check_and_open();              // call this function to check the code and open the door
  40   3          }
  41   2      
  42   2          if((P3 & 0x0f) == 12)   // if # is pressed to close the door
  43   2          {
  44   3            check_and_close();           // call this function to check the code and open the door
  45   3          }   
  46   2        } 
  47   1      }
  48          
  49          void check_and_open()
  50          {
  51   1        while((P3 & 0x0f) == 11);
  52   1        
  53   1        password_digit1=(P3 & 0x0f);      // store first digit of password
  54   1        while((P3 & 0x0f) == 1);      // wait till the next digit is pressed
  55   1        
  56   1        password_digit2=(P3 & 0x0f);      // store second digit of password
  57   1        while((P3 & 0x0f) == 2);
  58   1        
  59   1        password_digit3=(P3 & 0x0f);      // store third digit of password
  60   1        while((P3 & 0x0f) == 3);
  61   1        
  62   1        password_digit4=(P3 & 0x0f);      // store second digit of password
  63   1        while((P3 & 0x0f) == 4);
  64   1        
  65   1        end_star=(P3 & 0x0f);
  66   1        
  67   1        if(password_digit1 == 1 && password_digit2 == 2 && password_digit3 == 3 && password_digit4 == 4 && end_st
             -ar == 11 && flag == 0)  
  68   1        {
  69   2          cmd(0x01);
  70   2          cmd(0x80);
  71   2          string("    OPENING");
  72   2          cmd(0xc0);
  73   2          string("THE GARAGE DOOR");
  74   2          in1=1; in2=0;  // starting motor anti-clockwise
  75   2          delay(3000);  //open the door shutter for 5 sec and then close
  76   2          in1=in2=0;      // stop the motor
  77   2          cmd(0x01);
  78   2          string("  DOOR OPENED!");
  79   2          delay(3000);
  80   2          flag = 1;     // remember that the door is open, do not reopen it   
  81   2        } 
  82   1        else if(password_digit1 == 1 && password_digit2 == 2 && password_digit3 == 3 && password_digit4 == 4 && e
             -nd_star == 11 && flag == 1)
  83   1        {
  84   2          cmd(0x01);
C51 COMPILER V9.60.0.0   GARAGE_DOOR_CONTROLLER_USING_8051_                                03/25/2022 10:22:45 PAGE 4   

  85   2          cmd(0x80);
  86   2          string("DOOR IS ");
  87   2          cmd(0xc0);
  88   2          string("ALREADY OPENED!");
  89   2          delay(3000);
  90   2        } 
  91   1      }
  92          
  93          void check_and_close()
  94          {
  95   1        while((P3 & 0x0f) == 12);
  96   1        
  97   1        password_digit1=(P3 & 0x0f);      // store first digit of password
  98   1        while((P3 & 0x0f) == 1);      // wait till the next digit is pressed
  99   1        
 100   1        password_digit2=(P3 & 0x0f);      // store second digit of password
 101   1        while((P3 & 0x0f) == 2);
 102   1        
 103   1        password_digit3=(P3 & 0x0f);      // store third digit of password
 104   1        while((P3 & 0x0f) == 3);
 105   1        
 106   1        password_digit4=(P3 & 0x0f);      // store second digit of password
 107   1        while((P3 & 0x0f) == 4);
 108   1        
 109   1        end_hash=(P3 & 0x0f);
 110   1        
 111   1        if(password_digit1 == 1 && password_digit2 == 2 && password_digit3 == 3 && password_digit4 == 4 && end_ha
             -sh == 12 && flag == 1)
 112   1        { 
 113   2          cmd(0x01);
 114   2          cmd(0x80);
 115   2          string("    CLOSING");
 116   2          cmd(0xc0);
 117   2          string("THE GARAGE DOOR");
 118   2          in1=0; in2=1;     // starting motor clockwise
 119   2          delay(3000);      // close the door shutter in 5 sec and then stop the motor
 120   2          in1=in2=0;        // stop the motor
 121   2          cmd(0x01);
 122   2          string("  DOOR CLOSED!");
 123   2          delay(3000);
 124   2          flag = 0; 
 125   2        }
 126   1        else if(password_digit1 == 1 && password_digit2 == 2 && password_digit3 == 3 && password_digit4 == 4 && e
             -nd_hash == 12 && flag == 0)
 127   1        {
 128   2          cmd(0x01);
 129   2          cmd(0x80);
 130   2          string("DOOR IS");
 131   2          cmd(0xc0);
 132   2          string("ALREADY CLOSED!");
 133   2          delay(3000);
 134   2        }
 135   1      }
 136          
 137          //---------------microcontroller initialzation-----------//
 138          void controller_init()
 139          {
 140   1        lcd=0x00;    // make lcd connected pins as output
 141   1        rs=0;
 142   1        en=0;
 143   1        in1=in2=0;  // make motor driver ic pins as output
 144   1        P3 = 0xff;  // make dtmf module pins as inputs
C51 COMPILER V9.60.0.0   GARAGE_DOOR_CONTROLLER_USING_8051_                                03/25/2022 10:22:45 PAGE 5   

 145   1      }
 146          
 147          //--------------------------LCD Code-------------------//
 148          void lcd_init()
 149          {
 150   1        cmd(0x01);     //clear the screen 
 151   1        cmd(0x38);     //8-bit mode with 5*7 matrix
 152   1        cmd(0x0c);     //display on with cursor =>(0ch=curson off; 0fh=cursor blinking; 0eh=curson on)  
 153   1        cmd(0x06);     //shift cursor =>(06h right--> ; 04h <---left; default=right--->)
 154   1        cmd(0x80);     //position =>(80=1st row 1st position; c0=2nd row 1st position)
 155   1      }
 156          
 157          void cmd(unsigned char ch)
 158          {
 159   1        lcd=ch;
 160   1        rs=0;
 161   1        en=1;
 162   1        delay(2);
 163   1        en=0;
 164   1      }
 165          
 166          void character(unsigned char ch)
 167          {
 168   1        lcd=ch;
 169   1        rs=1;
 170   1        en=1;
 171   1        delay(2);
 172   1        en=0;
 173   1      }
 174          
 175          void string(unsigned char *p)
 176          {
 177   1        while(*p)
 178   1        character(*p++);
 179   1      }
 180          //-----------------------End of LCD Code------------------------//  
 181          
 182          void delay(int d)
 183          {
 184   1        unsigned char i;
 185   1        for(;d>0;d--)
 186   1        {
 187   2          for(i=250;i>0;i--);   //500usec
 188   2          for(i=250;i>0;i--);   //500usec
 189   2        }
 190   1      }
C51 COMPILER V9.60.0.0   GARAGE_DOOR_CONTROLLER_USING_8051_                                03/25/2022 10:22:45 PAGE 6   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
in1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
in2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
check_and_close. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_delay . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0004H  -----
  d. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
_string. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0006H  -----
  p. . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
flag . . . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0000H  2
password_digit1. . . . . . . . . . . .  PUBLIC   DATA   INT      0002H  2
password_digit2. . . . . . . . . . . .  PUBLIC   DATA   INT      0004H  2
password_digit3. . . . . . . . . . . .  PUBLIC   DATA   INT      0006H  2
password_digit4. . . . . . . . . . . .  PUBLIC   DATA   INT      0008H  2
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
check_and_open . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_character . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_cmd . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0006H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
end_hash . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      000AH  2
lcd_init . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
en . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
end_star . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      000CH  2
controller_init. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
d. . . . . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      000EH  2
rs . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
m. . . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0010H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    777    ----
   CONSTANT SIZE    =    151    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
